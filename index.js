var T=(y)=>typeof y==="function";var w=(y)=>T(y)&&y.length<2,Y=(y,x)=>Object.prototype.toString.call(y)===`[object ${x}]`,o=(y)=>(x)=>x instanceof y,i=o(Error),f=o(Promise),q=(y)=>i(y)?y:new Error(String(y));if(!("requestAnimationFrame"in globalThis))globalThis.requestAnimationFrame=(y)=>setTimeout(y,16);var Z,A=new Set,U=new Set,R=new Map,O=!1,I,b=()=>{I=null;for(let y of R.values()){for(let x of y.values())x();y.clear()}},h=()=>{if(I)cancelAnimationFrame(I);I=requestAnimationFrame(b)};queueMicrotask(b);var m=()=>{O=!1;while(A.size||U.size){for(let y of A)y();A.clear();for(let y of U)y();U.clear()}},P=(y)=>{if(Z&&!y.includes(Z))y.push(Z)},D=(y)=>{for(let x of y)A.add(x);if(!O)O=!0,queueMicrotask(m)},Q=(y,x)=>{let L=Z;Z=x,y(),Z=L},d=(y,x)=>new Promise((L,$)=>{let B=()=>{try{L(y())}catch(z){$(z)}};if(x){let[z,J]=x;if(!R.has(z))R.set(z,new Map);R.get(z).set(J,B)}h()});function F(y,...x){let L=T(y)?{ok:y}:y,{ok:$,nil:B,err:z}=L,J=()=>Q(()=>{let C=[],W=[],X=!1;for(let K of x)try{let G=K.get();if(G===V)X=!0;C.push(G)}catch(G){W.push(q(G))}try{if(!X&&!W.length)$(...C);else if(W.length&&z)z(...W);else if(X&&B)B()}catch(K){z?.(q(K))}},J);J()}var k="Computed",_=1000,j=(y)=>{let x=[],L=V,$=null,B=!0,z=!1,J=!1,C=0,W=()=>{if(B=!0,!z)D(x)},X=()=>Q(()=>{if(!B||J)return;let G=(H)=>{if(!Object.is(H,L))L=H,B=!1,$=null,z=!1;else z=!0},S=(H)=>{let N=q(H);z=Object.is(N,$),$=N};J=!0;try{let H=y(L);f(H)?H.then((N)=>{G(N),D(x)}).catch(S):G(H)}catch(H){S(H)}finally{J=!1}},W),K={[Symbol.toStringTag]:k,get:()=>{if(C++>=_)throw new Error(`Circular dependency detected: exceeded ${_} iterations`);if(P(x),X(),$)throw $;return L},map:(G)=>j(()=>G(K.get())),match:(G)=>F(G,K)};return K},g=(y)=>Y(y,k);var p="State",E=(y)=>{let x=[],L=y,$={[Symbol.toStringTag]:p,get:()=>{return P(x),L},set:(B)=>{if(Object.is(L,B))return;if(L=B,D(x),V===L)x.length=0},update:(B)=>{$.set(B(L))},map:(B)=>{return j(()=>B($.get()))},match:(B)=>F(B,$)};return $},M=(y)=>Y(y,p);var V=Symbol(),n=(y)=>M(y)||g(y),s=(y)=>n(y)?y:w(y)?j(y):E(y);export{s as toSignal,E as state,M as isState,n as isSignal,g as isComputed,m as flush,d as enqueue,F as effect,j as computed,V as UNSET};
